// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: auctionSystem/auctionSystem.proto

package auctionSystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectServiceClient is the client API for ConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectServiceClient interface {
	JoinNetwork(ctx context.Context, in *PeerJoin, opts ...grpc.CallOption) (*ConnectedTo, error)
}

type connectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectServiceClient(cc grpc.ClientConnInterface) ConnectServiceClient {
	return &connectServiceClient{cc}
}

func (c *connectServiceClient) JoinNetwork(ctx context.Context, in *PeerJoin, opts ...grpc.CallOption) (*ConnectedTo, error) {
	out := new(ConnectedTo)
	err := c.cc.Invoke(ctx, "/auctionSystem.ConnectService/JoinNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectServiceServer is the server API for ConnectService service.
// All implementations must embed UnimplementedConnectServiceServer
// for forward compatibility
type ConnectServiceServer interface {
	JoinNetwork(context.Context, *PeerJoin) (*ConnectedTo, error)
	mustEmbedUnimplementedConnectServiceServer()
}

// UnimplementedConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServiceServer struct {
}

func (UnimplementedConnectServiceServer) JoinNetwork(context.Context, *PeerJoin) (*ConnectedTo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedConnectServiceServer) mustEmbedUnimplementedConnectServiceServer() {}

// UnsafeConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServiceServer will
// result in compilation errors.
type UnsafeConnectServiceServer interface {
	mustEmbedUnimplementedConnectServiceServer()
}

func RegisterConnectServiceServer(s grpc.ServiceRegistrar, srv ConnectServiceServer) {
	s.RegisterService(&ConnectService_ServiceDesc, srv)
}

func _ConnectService_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.ConnectService/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).JoinNetwork(ctx, req.(*PeerJoin))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectService_ServiceDesc is the grpc.ServiceDesc for ConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auctionSystem.ConnectService",
	HandlerType: (*ConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinNetwork",
			Handler:    _ConnectService_JoinNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auctionSystem/auctionSystem.proto",
}

// AuctionServiceClient is the client API for AuctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionServiceClient interface {
	SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*BidAck, error)
	GetResult(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error)
}

type auctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionServiceClient(cc grpc.ClientConnInterface) AuctionServiceClient {
	return &auctionServiceClient{cc}
}

func (c *auctionServiceClient) SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*BidAck, error) {
	out := new(BidAck)
	err := c.cc.Invoke(ctx, "/auctionSystem.AuctionService/SendBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetResult(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/auctionSystem.AuctionService/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionServiceServer is the server API for AuctionService service.
// All implementations must embed UnimplementedAuctionServiceServer
// for forward compatibility
type AuctionServiceServer interface {
	SendBid(context.Context, *Bid) (*BidAck, error)
	GetResult(context.Context, *Void) (*Outcome, error)
	mustEmbedUnimplementedAuctionServiceServer()
}

// UnimplementedAuctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServiceServer struct {
}

func (UnimplementedAuctionServiceServer) SendBid(context.Context, *Bid) (*BidAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedAuctionServiceServer) GetResult(context.Context, *Void) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedAuctionServiceServer) mustEmbedUnimplementedAuctionServiceServer() {}

// UnsafeAuctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServiceServer will
// result in compilation errors.
type UnsafeAuctionServiceServer interface {
	mustEmbedUnimplementedAuctionServiceServer()
}

func RegisterAuctionServiceServer(s grpc.ServiceRegistrar, srv AuctionServiceServer) {
	s.RegisterService(&AuctionService_ServiceDesc, srv)
}

func _AuctionService_SendBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).SendBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.AuctionService/SendBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).SendBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.AuctionService/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).GetResult(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionService_ServiceDesc is the grpc.ServiceDesc for AuctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auctionSystem.AuctionService",
	HandlerType: (*AuctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBid",
			Handler:    _AuctionService_SendBid_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _AuctionService_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auctionSystem/auctionSystem.proto",
}

// BullyServiceClient is the client API for BullyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BullyServiceClient interface {
	SendElection(ctx context.Context, in *Election, opts ...grpc.CallOption) (*Void, error)
	SendAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Void, error)
	SendCoordinator(ctx context.Context, in *Coordinator, opts ...grpc.CallOption) (*Void, error)
}

type bullyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBullyServiceClient(cc grpc.ClientConnInterface) BullyServiceClient {
	return &bullyServiceClient{cc}
}

func (c *bullyServiceClient) SendElection(ctx context.Context, in *Election, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auctionSystem.BullyService/SendElection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bullyServiceClient) SendAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auctionSystem.BullyService/SendAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bullyServiceClient) SendCoordinator(ctx context.Context, in *Coordinator, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auctionSystem.BullyService/SendCoordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BullyServiceServer is the server API for BullyService service.
// All implementations must embed UnimplementedBullyServiceServer
// for forward compatibility
type BullyServiceServer interface {
	SendElection(context.Context, *Election) (*Void, error)
	SendAnswer(context.Context, *Answer) (*Void, error)
	SendCoordinator(context.Context, *Coordinator) (*Void, error)
	mustEmbedUnimplementedBullyServiceServer()
}

// UnimplementedBullyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBullyServiceServer struct {
}

func (UnimplementedBullyServiceServer) SendElection(context.Context, *Election) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendElection not implemented")
}
func (UnimplementedBullyServiceServer) SendAnswer(context.Context, *Answer) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAnswer not implemented")
}
func (UnimplementedBullyServiceServer) SendCoordinator(context.Context, *Coordinator) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoordinator not implemented")
}
func (UnimplementedBullyServiceServer) mustEmbedUnimplementedBullyServiceServer() {}

// UnsafeBullyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BullyServiceServer will
// result in compilation errors.
type UnsafeBullyServiceServer interface {
	mustEmbedUnimplementedBullyServiceServer()
}

func RegisterBullyServiceServer(s grpc.ServiceRegistrar, srv BullyServiceServer) {
	s.RegisterService(&BullyService_ServiceDesc, srv)
}

func _BullyService_SendElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Election)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServiceServer).SendElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.BullyService/SendElection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServiceServer).SendElection(ctx, req.(*Election))
	}
	return interceptor(ctx, in, info, handler)
}

func _BullyService_SendAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServiceServer).SendAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.BullyService/SendAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServiceServer).SendAnswer(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BullyService_SendCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServiceServer).SendCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.BullyService/SendCoordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServiceServer).SendCoordinator(ctx, req.(*Coordinator))
	}
	return interceptor(ctx, in, info, handler)
}

// BullyService_ServiceDesc is the grpc.ServiceDesc for BullyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BullyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auctionSystem.BullyService",
	HandlerType: (*BullyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendElection",
			Handler:    _BullyService_SendElection_Handler,
		},
		{
			MethodName: "SendAnswer",
			Handler:    _BullyService_SendAnswer_Handler,
		},
		{
			MethodName: "SendCoordinator",
			Handler:    _BullyService_SendCoordinator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auctionSystem/auctionSystem.proto",
}

// FrontendServiceClient is the client API for FrontendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendServiceClient interface {
	SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*BidAck, error)
	GetResult(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error)
	SetPrimaryNode(ctx context.Context, in *Coordinator, opts ...grpc.CallOption) (*Void, error)
}

type frontendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendServiceClient(cc grpc.ClientConnInterface) FrontendServiceClient {
	return &frontendServiceClient{cc}
}

func (c *frontendServiceClient) SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*BidAck, error) {
	out := new(BidAck)
	err := c.cc.Invoke(ctx, "/auctionSystem.FrontendService/SendBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetResult(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/auctionSystem.FrontendService/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) SetPrimaryNode(ctx context.Context, in *Coordinator, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auctionSystem.FrontendService/SetPrimaryNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServiceServer is the server API for FrontendService service.
// All implementations must embed UnimplementedFrontendServiceServer
// for forward compatibility
type FrontendServiceServer interface {
	SendBid(context.Context, *Bid) (*BidAck, error)
	GetResult(context.Context, *Void) (*Outcome, error)
	SetPrimaryNode(context.Context, *Coordinator) (*Void, error)
	mustEmbedUnimplementedFrontendServiceServer()
}

// UnimplementedFrontendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendServiceServer struct {
}

func (UnimplementedFrontendServiceServer) SendBid(context.Context, *Bid) (*BidAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedFrontendServiceServer) GetResult(context.Context, *Void) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedFrontendServiceServer) SetPrimaryNode(context.Context, *Coordinator) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimaryNode not implemented")
}
func (UnimplementedFrontendServiceServer) mustEmbedUnimplementedFrontendServiceServer() {}

// UnsafeFrontendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServiceServer will
// result in compilation errors.
type UnsafeFrontendServiceServer interface {
	mustEmbedUnimplementedFrontendServiceServer()
}

func RegisterFrontendServiceServer(s grpc.ServiceRegistrar, srv FrontendServiceServer) {
	s.RegisterService(&FrontendService_ServiceDesc, srv)
}

func _FrontendService_SendBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).SendBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.FrontendService/SendBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).SendBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.FrontendService/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetResult(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_SetPrimaryNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).SetPrimaryNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auctionSystem.FrontendService/SetPrimaryNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).SetPrimaryNode(ctx, req.(*Coordinator))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendService_ServiceDesc is the grpc.ServiceDesc for FrontendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auctionSystem.FrontendService",
	HandlerType: (*FrontendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBid",
			Handler:    _FrontendService_SendBid_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _FrontendService_GetResult_Handler,
		},
		{
			MethodName: "SetPrimaryNode",
			Handler:    _FrontendService_SetPrimaryNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auctionSystem/auctionSystem.proto",
}
